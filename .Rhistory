B_ai[a,i] <- N_ai[a,i]*indat[a,s+2,i] ## weight in 3 and 4 col
SB_ai[a,i]  <- if(s == 1) B_ai[a,i]*indat[a,1,i]
B_i <- sum(B_a[,i])
SB_i <- sum(SB_a[,i])
} ## end subareas i
return(cbind(N_ai,Z_ai,sum(B_i), sum(SB_i)))
}
## returns area-specific N@age and Z@age
doNage(s = 1)[,1:3] %>%
data.frame() %>%
mutate(Age = 1:nages) %>%
reshape2::melt(id = 'Age') %>%
mutate(Area = substr(variable,2,2)) %>%
ggplot(., aes(x = Age, y = value, col = Area)) +
geom_line(lwd = 1.1) +
scale_color_grey() +
labs(x = 'Age', y = 'Numbers', color = 'Area') +
theme_sleek()
doNage <- function(X = X_ija, ## input movement matrix
indat = dat, ## with bio info'
s = 1, ## F = 1, M = 2
Fv = rep(0,narea),
M = 0.15) {
N_ai <- Z_ai <- B_ai <- SB_ai<- matrix(NA, nrow = nages, ncol = narea) ## placeholder
for(a in 1:nages){
if(a == 1) N_ai[a,] <- 0.5 ## inits
for(i in 1:narea){
Z_ai[a,i] <- M + indat[a,s+4,i]*Fv[i] ## female selex for now (cols 5:6)
if(a > 1  & a < max(nages)) {
pLeave = NCome = 0
for(j in 1:narea){
if(i != j){
pLeave = pLeave + X_ija[i,j,a-1]
NCome = NCome + X_ija[j,i,a-1]*N_ai[a-1,j]
# if(is.na(NCome)) stop("NA NCOME at",a,i,j,"\n")
} # end i != j
} # end subareas j
N_ai[a,i] <- ((1-pLeave)* N_ai[a-1,i] +NCome)*exp(-Z_ai[a-1,i])
# if(is.na(N_ai[a,i])) stop("NA NAI at",a,i,"\n")
} ## end age < maxage
if(a == max(nages)) N_ai[a,i] <-  N_ai[a-1,i]*exp(-Z_ai[a-1,i])/(1- exp(-Z_ai[a,i]))
} # end ages
B_ai[a,i] <- N_ai[a,i]*indat[a,s+2,i] ## weight in 3 and 4 col
SB_ai[a,i]  <- if(s == 1) B_ai[a,i]*indat[a,1,i]
B_i <- sum(B_ai[,i])
SB_i <- sum(SB_ai[,i])
} ## end subareas i
return(cbind(N_ai,Z_ai,sum(B_i), sum(SB_i)))
}
## returns area-specific N@age and Z@age
doNage(s = 1)[,1:3] %>%
data.frame() %>%
mutate(Age = 1:nages) %>%
reshape2::melt(id = 'Age') %>%
mutate(Area = substr(variable,2,2)) %>%
ggplot(., aes(x = Age, y = value, col = Area)) +
geom_line(lwd = 1.1) +
scale_color_grey() +
labs(x = 'Age', y = 'Numbers', color = 'Area') +
theme_sleek()
doNage(s = 1)
masterFunc(SRR = s, h = h, Fv = Fv_test-0.001)
doYPR <-function( Fv= rep(0.2,narea), M = 0.15 ) {
ypr_sa <- array(NA, dim = c(1,2,narea)) ## each sex by area
ypr_a <- matrix(NA, nrow = 1, ncol = narea) ## each  area
ypr  <- NA  ## total
for(i in 1:narea){
for(s in 1:2){ ## loop sexes
wt <- dat[,s+2,i] ## cols 2 & 3
nzmat <-  doNage(s = s, Fv = Fv) ## expects 3 FV values
n_a <- nzmat[,i]
z_a <- nzmat[,i+3]
## Baranov
ypr_sa[1,s,i] <- sum(wt*(( dat[,s+4,i]*Fv[i])/z_a)*n_a*(1-exp(-z_a)))
} ## end sexes
ypr_a[i] <- sum(ypr_sa[1,,i])
} ## end areas
ypr <- sum(ypr_a)
return(list(ypr_sa,ypr_a,ypr))
}
## put it all together
masterFunc <-
function(
Fv = rep(0,narea),
SRR = 1,
h = 0.5,
gam = 1,
R0 = 1,
S0 = 0.6739975) {
ypr_a <- doYPR(Fv = Fv)[[2]] ## second element is per area
rec_sb <-  doSRR( SRR = SRR, h = h, Fv = Fv,gam = gam, R0 = R0,S0 = S0)
yield <- doYield(ypr_a,rec_sb$rec) ## second object is total
df <- data.frame(
"SRR" = c('BevHolt','Ricker','Pella-T')[SRR],
"Fmort" = Fv,
"rec" = rec_sb$rec,
"yield" = yield[[1]],
"spawnbio" = rec_sb$spawnbio) #rec[2]*rec[1])    ## eq 7
return(df)
}
masterFunc(SRR = s, h = h, Fv = Fv_test-0.001)
## find where F is minimized and S ~ 0, bisection
bisect <- function(Fmin = 0, Fmax = 1){
for(b in 1:1000){
Fv_testM <- (Fmin + Fmax)/2 ## update
sbio_temp <- masterFunc(SRR = s, Fv = Fv_testM)$spawnbio
if(round(sbio_temp,4) == 0 & (Fmax - Fmin) > 0.0002){ return(Fv_testM)
} else if(round(sbio_temp,4) > 0) { Fmin <- Fv_testM
} else if(round(sbio_temp,4) < 0) { Fmax <- Fv_testM }
}
print('max iter')
}
masterFunc
masterFunc(SRR = s, Fv = Fv_testM)$spawnbio
## plug for MSY
MSY <- masterFunc(SRR = s, Fv = FMSY)$yield
## obtain FMSY
FMSY <- as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.1,1))[1])
dfx.dx
y1
masterFunc(SRR = s, h = h, Fv = Fv_test-0.001)$yield
as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.1,1))[1])
masterFunc(SRR = s, h = h, Fv = 0.5-0.001)
doNage()
doNage(s = 2)
doNage <- function(X = X_ija, ## input movement matrix
indat = dat, ## with bio info'
s = 1, ## F = 1, M = 2
Fv = rep(0,narea),
M = 0.15) {
N_ai <- Z_ai <- B_ai <- SB_ai<- matrix(NA, nrow = nages, ncol = narea) ## placeholder
for(a in 1:nages){
if(a == 1) N_ai[a,] <- 0.5 ## inits
for(i in 1:narea){
Z_ai[a,i] <- M + indat[a,s+4,i]*Fv[i] ## female selex for now (cols 5:6)
if(a > 1  & a < max(nages)) {
pLeave = NCome = 0
for(j in 1:narea){
if(i != j){
pLeave = pLeave + X_ija[i,j,a-1]
NCome = NCome + X_ija[j,i,a-1]*N_ai[a-1,j]
# if(is.na(NCome)) stop("NA NCOME at",a,i,j,"\n")
} # end i != j
} # end subareas j
N_ai[a,i] <- ((1-pLeave)* N_ai[a-1,i] +NCome)*exp(-Z_ai[a-1,i])
# if(is.na(N_ai[a,i])) stop("NA NAI at",a,i,"\n")
} ## end age < maxage
if(a == max(nages)) N_ai[a,i] <-  N_ai[a-1,i]*exp(-Z_ai[a-1,i])/(1- exp(-Z_ai[a,i]))
} # end ages
B_ai[a,i] <- N_ai[a,i]*indat[a,s+2,i] ## weight in 3 and 4 col
if(s == 1){
SB_ai[a,i]  <- NA
SB_ai[a,i]  <- B_ai[a,i]*indat[a,1,i]
}
B_i <- sum(B_ai[,i])
SB_i <- sum(SB_ai[,i])
} ## end subareas i
return(cbind(N_ai,Z_ai,sum(B_i), sum(SB_i)))
}
doNage(s = 2)
## obtain FMSY
FMSY <- as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.1,1))[1])
masterFunc(SRR = s, h = h, Fv = 1-0.001)
masterFunc(SRR = 1, h = h, Fv = Fv_test-0.001)
masterFunc(SRR = 1, h = h, Fv = 0.99-0.001)
masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))
masterFunc(SRR = 1, h = h, Fv = rep(0.98-0.001,narea))
## likely need to try many combos of Fvtest by area
dfx.dx <- function(Fv_test, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
appx <- (y2-y1)/(0.002) #0.002 is total delta
return(appx)
}
## obtain FMSY
FMSY <- as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.1,1))[1])
masterFunc(SRR = 1, h = h, Fv = rep(0.2-0.001,narea))
as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.1,1))[1])
as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.1,0.8))[1])
uniroot(f = dfx.dx,  h = 0.5, interval = c(0.1,0.2))
## obtain FMSY
FMSY <- as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.15,0.2))[1])
Fv_test = 0.2
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
y2
y1
## likely need to try many combos of Fvtest by area
dfx.dx <- function(Fv_test, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
appx <- (sum(y2)-sum(y1))/(0.002) #0.002 is total delta; we are using system yield
return(appx)
}
## obtain FMSY
FMSY <- as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.15,0.2))[1])
FMSY
## obtain FMSY
FMSY <- as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.02,1))[1])
FMSY
Fv_test
rm(Fv_test)
## likely need to try many combos of Fvtest by area
dfx.dx <- function(Fv_test, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
appx <- (sum(y2)-sum(y1))/(0.002) #0.002 is total delta; we are using system yield
return(appx)
}
## obtain FMSY
FMSY <- as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.02,1))[1])
FMSY
FV_test = 0.02
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
Fv_test = 0.02
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
y1
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
y2
(sum(y2)-sum(y1))/(0.002)
## likely need to try many combos of Fvtest by area
dfx.dx <- function(Fv_test, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test+0.001,narea))$yield
appx <- (sum(y2)-sum(y1))/(0.002) #0.002 is total delta; we are using system yield
return(appx)
}
## obtain FMSY
FMSY <- as.numeric(uniroot(f = dfx.dx,  h = 0.5, interval = c(0.02,1))[1])
FMSY
## plug for MSY
MSY <- masterFunc(SRR = s, Fv = FMSY)$yield
MSY
## plug for MSY
MSY <- masterFunc(SRR = s, Fv = rep(FMSY,narea))$yield
##
MSY
dfx.dxAREA <- function(Fv_test, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield[1]
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test+0.001,narea))$yield[1]
appx <- (y2-y1)/(0.002) #0.002 is total delta; we are using system yield
return(appx)
}
## obtain FMSY which maximizes yield in a given area [MANUALLY CHANGE]
FMSY <- as.numeric(uniroot(f = dfx.dxAREA,  h = 0.5, interval = c(0.02,1))[1])
FMSY
masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
masterFunc(SRR = 1, h = h, Fv = rep(Fv_test+0.001,narea))$yield[1]
## likely need to try many combos of Fvtest by area
dfx.dxSYS <- function(Fv_test, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test+0.001,narea))$yield
appx <- (sum(y2)-sum(y1))/(0.002) #0.002 is total delta; we are using system yield
return(appx)
}
dfx.dxAREA <- function(Fv_test, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield[1]
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test+0.001,narea))$yield[1]
appx <- (y2-y1)/(0.002) #0.002 is total delta; we are using system yield
return(appx)
}
## obtain FMSY which maximizes system yield
FMSY_sys <- as.numeric(uniroot(f = dfx.dxSYS,  h = 0.5, interval = c(0.02,1))[1])
## obtain FMSY which maximizes yield in a given area [MANUALLY CHANGE]
FMSY_area <- as.numeric(uniroot(f = dfx.dxAREA,  h = 0.5, interval = c(0.02,1))[1])
FMSY_area
FMSY_sys
dfx.dxAREA <- function(Fv_test, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield[2]
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test+0.001,narea))$yield[2]
appx <- (y2-y1)/(0.002) #0.002 is total delta; we are using system yield
return(appx)
}
## obtain FMSY which maximizes yield in a given area [MANUALLY CHANGE]
FMSY_area <- as.numeric(uniroot(f = dfx.dxAREA,  h = 0.5, interval = c(0.02,1))[1])
FMSY_area
dfx.dxAREA <- function(Fv_test, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test-0.001,narea))$yield[3]
y2 <- masterFunc(SRR = 1, h = h, Fv = rep(Fv_test+0.001,narea))$yield[3]
appx <- (y2-y1)/(0.002) #0.002 is total delta; we are using system yield
return(appx)
}
## obtain FMSY which maximizes system yield
FMSY_sys <- as.numeric(uniroot(f = dfx.dxSYS,  h = 0.5, interval = c(0.02,1))[1])
## obtain FMSY which maximizes yield in a given area [MANUALLY CHANGE]
FMSY_area <- as.numeric(uniroot(f = dfx.dxAREA,  h = 0.5, interval = c(0.02,1))[1])
FMSY_area
uniroot(f = dfx.dxAREA,  h = 0.5, interval = c(0.02,1))
rep(seq(0.02,1),3)
seq(0.02,1)
seq(0.02,1,0.001)
ep(seq(0.02,1,0.001),3)
## brute force - try various configs & save delta to search
Fv_config <- expand_grid(rep(seq(0.02,1,0.001),3))
expand.grid(rep(seq(0.02,1,0.001),3))
expand.grid(seq(0.02,1,0.001),seq(0.02,1,0.001),seq(0.02,1,0.001))
## brute force - try various configs & save delta to search
Fv_config <- expand.grid(seq(0.02,1,0.1),seq(0.02,1,0.1),seq(0.02,1,0.1))
Fv_config
Fv_config[k,]-0.001
Fv_config[1,]-0.001
Fv_config[55,]-0.001
appx = NULL
for(k in 1:nrow(Fv_config)){
y1 <- masterFunc(SRR = 1, h = h, Fv = Fv_config[k,]-0.001)$yield
y2 <- masterFunc(SRR = 1, h = h, Fv =  Fv_config[k,]+0.001)$yield
appx[k] <- (sum(y2)-sum(y1))/(0.002) #0.002 is total delta; we are using system yield
} # end configs
Fv_config[k,]-0.001
y1 <- masterFunc(SRR = 1, h = h, Fv = c(Fv_config[k,]-0.001))$yield
y1 <- masterFunc(SRR = 1, h = h, Fv = matrix(Fv_config[k,]-0.001))$yield
class(Fv_config[k,]-0.001)
as.numeric(Fv_config[k,]-0.001)
class(as.numeric(Fv_config[k,]-0.001))
y1 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(Fv_config[k,]-0.001))$yield
# dfx.dxCONFIGA <- function(Fv_config, h = 0.5){
appx = NULL
for(k in 1:nrow(Fv_config)){
y2 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(Fv_config[k,]+0.001)$yield
appx[k] <- (sum(y2)-sum(y1))/(0.002) #0.002 is total delta; we are using system yield
} # end configs
#   return(appx) ## want to minimize all 3
# }
## obtain FMSY which maximizes system yield
FMSY_sys <- as.numeric(uniroot(f = dfx.dxSYS,  h = 0.5, interval = c(0.02,1))[1])
## obtain FMSY which maximizes yield in a given area [MANUALLY CHANGE]
FMSY_area <- as.numeric(uniroot(f = dfx.dxAREA,  h = 0.5, interval = c(0.02,1))[1])
FMSY_area <- as.numeric(uniroot(f = dfx.dxAREA,  h = 0.5, interval = c(0.02,1))[1])
## plug for MSY by area
MSY <- masterFunc(SRR = s, Fv = rep(FMSY,narea))$yield
Fcrash <- bisect()
q3b[s,] <- c( c('BevHolt','Ricker','Pella-T, gamma = 1')[s], round(FMSY,4), round(MSY,4), round(Fcrash,4))
# dfx.dxCONFIGA <- function(Fv_config, h = 0.5){
appx = NULL
for(k in 1:nrow(Fv_config)){
y1 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(Fv_config[k,]-0.001))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(Fv_config[k,]+0.001))$yield
appx[k] <- (sum(y2)-sum(y1))/(0.002) #0.002 is total delta; we are using system yield
} # end configs
appx
appx[which.min[appx]]
appx[which.min(appx)
]
dfx.dxCONFIGA <- function(Fv_config, h = 0.5){
appx = NULL
# for(k in 1:nrow(Fv_config)){
y1 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(Fv_config[k,]-0.001))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(Fv_config[k,]+0.001))$yield
appx[k] <- (sum(y2)-sum(y1))/(0.002) #0.002 is total delta; we are using system yield
# } # end configs
return(appx) ## want to minimize all 3
}
FMSY_config <- as.numeric(uniroot(f = dfx.dxCONFIGA,  h = 0.5, interval = c(1:nrow(Fv_config)))[1])
FMSY_config <- as.numeric(uniroot(f = dfx.dxCONFIGA,  h = 0.5, interval = c(1,nrow(Fv_config)))[1])
dfx.dxCONFIGA <- function(k, h = 0.5){
appx = NULL
# for(k in 1:nrow(Fv_config)){
y1 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(Fv_config[k,]-0.001))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(Fv_config[k,]+0.001))$yield
appx[k] <- (sum(y2)-sum(y1))/(0.002) #0.002 is total delta; we are using system yield
# } # end configs
return(appx) ## want to minimize all 3
}
FMSY_config <- as.numeric(uniroot(f = dfx.dxCONFIGA,  h = 0.5,
interval = c(1,nrow(Fv_config)))[1])
find_root <- function(Fv_test) {
uniroot(
dfx.dxSYS , ## do systemwide yield
interval = c(0.02,1)
)$root
}
mapply(find_root, Fv_config$Var1, Fv_config$Var2)
## systemwide but with individual FV_test
dfx.dxSYS2 <- function(Fv_test, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv =Fv_test-0.001)$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = Fv_test+0.001)$yield
appx <- (sum(y2)-sum(y1))/(0.002) #0.002 is total X delta; we are using system yield
return(appx)
}
find_root <- function(Fv_test) {
uniroot(
dfx.dxSYS2 , ## do systemwide yield
interval = c(0.02,1)
)$root
}
data$root <- mapply(find_root, Fv_config$Var1, Fv_config$Var2)
find_root
Fv_config$Var1
Fv_config$Var2
find_root <- function(Fv_testa1, Fv_testa2) {
uniroot(
dfx.dxSYS2 , ## do systemwide yield
interval = c(0.02,1)
)$root
}
mapply(find_root, Fv_config$Var1, Fv_config$Var2)
mapply(function(Fv_testa1, Fv_testa2) tryCatch(find_root(Fv_testa1, Fv_testa2), error=function(e) NA),
Fv_config$Var1, Fv_config$Var2)
Fv_config$root <- mapply(function(Fv_testa1, Fv_testa2)
tryCatch(
find_root(Fv_testa1, Fv_testa2),
error = function(e)NA),
Fv_config$Var1, Fv_config$Var2)
Fv_config$root
length(Fv_config$root )
sum(is.na(Fv_config$root ))
## systemwide but with separate FV_test
dfx.dxSYS2 <- function(Fv_testa1, Fv_testa2, h = 0.5){
y1 <- masterFunc(SRR = 1, h = h, Fv = c(Fv_testa1-0.001,Fv_testa2- 0.001) )$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = c(Fv_testa1+0.001,Fv_testa2+ 0.001))$yield
appx <- (sum(y2)-sum(y1))/(0.002) #0.002 is total X delta; we are using system yield
return(appx)
}
find_root <- function(Fv_testa1, Fv_testa2) {
uniroot(
dfx.dxSYS2 , ## do systemwide yield accepting solo Fv arg
interval = c(0.02,1)
)$root
}
Fv_config$root <- mapply(function(Fv_testa1, Fv_testa2)
tryCatch(
find_root(Fv_testa1, Fv_testa2),
error = function(e)NA),
Fv_config$Var1, Fv_config$Var2)
Fv_config$root
find_root(Fv_testa1, Fv_testa2)
?nlminb
nlminb(start = 0.02, minFunc, lower = 0.02, upper = 1)
minFunc <- function(F1,F2,F3){
y1 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(c(F1,F2,F3)-0.001))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(c(F1,F2,F3)+0.001))$yield
appx <- (sum(y2)-sum(y1))/(0.002) ## system yield again
}
minFunc <- function(F1,F2,F3){
y1 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(c(F1,F2,F3)-0.001))$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = as.numeric(c(F1,F2,F3)+0.001))$yield
appx <- (sum(y2)-sum(y1))/(0.002) ## system yield again
return(appx)
}
nlminb(start = 0.02, minFunc, lower = 0.02, upper = 1)
nlminb(start = rep(0.02,3), minFunc, lower = 0.02, upper = 1)
masterFunc(SRR = 1, h = h, Fv = c(as.numeric(F1,F2,F3-0.001))
)
F1 = F2 = F3 = 0.4
masterFunc(SRR = 1, h = h, Fv = c(as.numeric(F1,F2,F3-0.001)))$yield
c(as.numeric(F1,F2,F3-0.001))
as.numeric(F1,F2,F3)-0.001)
as.numeric(F1,F2,F3)-0.001
apply(c(F1,F2,F3), FUN = function(x)x - 0.001)
as.numeric(c(F1 - 0.001,F1 - 0.001,F1 - 0.001)
)
minus <- as.numeric(c(F1 - 0.001,F2 - 0.001,F2 - 0.001))
plus <- as.numeric(c(F1 +0.001,F2 + 0.001,F2 + 0.001))
plus
masterFunc(SRR = 1, h = h, Fv = minus)
minFunc <- function(F1,F2,F3){
minus <- as.numeric(c(F1 - 0.001,F2 - 0.001,F2 - 0.001))
plus <- as.numeric(c(F1 +0.001,F2 + 0.001,F2 + 0.001))
y1 <- masterFunc(SRR = 1, h = h, Fv = minus)$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = plus)$yield
appx <- (sum(y2)-sum(y1))/(0.002) ## system yield again
return(appx)
}
nlminb(start = rep(0.02,3), minFunc, lower = 0.02, upper = 1)
nlminb(start = list(F1 = 0.02, F2 = 0.02, F3 = 0.02), minFunc, lower = 0.02, upper = 1)
nlminb(start = c(0.02,0.02,0.02),
minFunc, lower = 0.02, upper = 1)
nlminb(par = c(0.02,0.02,0.02),
minFunc, lower = 0.02, upper = 1)
nlminb( minFunc, lower = 0.02, upper = 1)
nlminb(objective =  minFunc, lower = 0.02, upper = 1)
nlminb(start = rep(0.02,3), objective =  minFunc, lower = 0.02, upper = 1)
mle(minFunc, start = list(F1 = 0.02, F2 = 0.02, F3 = 0.02))
minFunc <- function(F1,F2,F3){
minus <- as.numeric(c(F1 - 0.001,F2 - 0.001,F3 - 0.001))
plus <- as.numeric(c(F1 +0.001,F2 + 0.001,F3 + 0.001))
y1 <- masterFunc(SRR = 1, h = h, Fv = minus)$yield
y2 <- masterFunc(SRR = 1, h = h, Fv = plus)$yield
appx <- (sum(y2)-sum(y1))/(0.002) ## system yield again
return(appx)
}
mle(minFunc, start = list(F1 = 0.02, F2 = 0.02, F3 = 0.02))
?MLE
?mle
mle(minFunc, start = list(F1 = 0.02, F2 = 0.02, F3 = 0.02), lower = c(0, 0,0), upper = c(1,1,1))
mle(minFunc, start = list(F1 = 0.02, F2 = 0.02, F3 = 0.02), method = "L-BFGS-B",
lower = c(0, 0,0), upper = c(1,1,1))
FMSY_config <- mle(minFunc, start = list(F1 = 0.02, F2 = 0.02, F3 = 0.02), method = "L-BFGS-B",
lower = c(0, 0,0), upper = c(1,1,1))
coef(FMSY_config)
FMSY_sys
FMSY_area
## plug for MSY by area
MSY_sys <- masterFunc(SRR = s, Fv = rep(FMSY_sys,narea))$yield
MSY_area <- masterFunc(SRR = s, Fv = rep(FMSY_area,narea))$yield
MSY_config <- masterFunc(SRR = s, Fv = FMSY_config)$yield
## FMSY by area which maximizes system yield
FMSY_config <- coef(mle(minFunc, start = list(F1 = 0.02, F2 = 0.02, F3 = 0.02), method = "L-BFGS-B",
lower = c(0, 0,0), upper = c(1,1,1)))
MSY_config <- masterFunc(SRR = s, Fv = FMSY_config)$yield
MSY_config
df <- data.frame('Method' = c('Fmsy_System','Fmsy_A3','Fmsy_Config'),
'FMSY' = NA,
'MSY' = NA,
'BMSY' = NA)
rep(as.numeric(uniroot(f = dfx.dxSYS,  h = 0.5, interval = c(0.02,1))[1]),3)
df <- data.frame('Method' = c('Fmsy_System','Fmsy_A3','Fmsy_Config'),
'FMSY' = NA,
'MSY' = NA,
'BMSY' = NA)
df[1,"FMSY"] <- rep(as.numeric(uniroot(f = dfx.dxSYS,  h = 0.5, interval = c(0.02,1))[1]),3)
