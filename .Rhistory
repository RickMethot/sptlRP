#   ggplot(., aes(x = FV_sys, y = value, color = variable)) +
#   geom_line(lwd = 1.1) +
#   scale_color_grey(labels = paste("Area",1:3)) +
#   labs(x = 'F in area', y = 'YPR', color = '') +
#   # scale_y_continuous(limits = c(0,0.5)) +
#   theme_sleek() +
#   theme(legend.position = c(0.8,0.9),
#         axis.title = element_text(size = 16),
#         axis.text = element_text(size = 16),
#         legend.text = element_text(size = 20))
## Yield - should look domey
brute[,c(1:4)] %>%
melt(id = 'FV_sys') %>%
ggplot(., aes(x = FV_sys, y = value, color = variable)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
# scale_y_continuous(limits = c(0,0.4)) +
scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[i],narea))
doSRR <- function( SRR = 1, h = steep,
Fv = rep(0,narea), gam = 1, R0 = 1, S0 = 0.6739975){
sumSBPR <- R <- NULL
for(i in 1:narea){
## get s-tilde
sumSBPR[i] <- sum(doNage(Fv = Fv)[,9+i]) ## SB in cols 10:12
# sumSBPR <- sum(sbpr)
# if(SRR == 1){ ## bevholt
ab <- getAB(SRR = 1, h = steep, i=i) ## specific alpha, beta for area
R[i] <- (  sumSBPR[i] - ab[1] )/(ab[2] *   sumSBPR[i]) ## Equation 9. eq recruits
rm(ab)
# } else if(SRR == 2){ ## ricker
#   ab <- getAB(SRR = 2, h = steep)
#   R <- log(ab[1]*sumSBPR)/(ab[2]*sumSBPR) ## Question 1A
# } else if(SRR == 3){ ## Pella
#   ab <- getAB(SRR = 3, h = steep)
#   R <- (S0/sumSBPR) * (1 - (1 - ab[1] * sumSBPR)/(ab[2] * ab[1] * sumSBPR))^(1/gam) ## Question 1B
}
return(list('rec' = as.numeric(R),'spawnbio' = sumSBPR))
}
masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[i],narea))
Fv_test[i]
Fv_test <- seq(0,1,0.01)
for( v in 1:length(Fv_test)){
temp <- masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[v],narea))
temp2 <- doYPR(Fv = rep(Fv_test[v],narea))
brute[v,'FV_sys'] = Fv_test[v]
for(a in 1:narea) brute[v,a+1] = temp$yield[a]
for(a in 1:narea) brute[v,a+4] = temp2[[2]][a]
}
## Yield - should look domey
brute[,c(1:4)] %>%
melt(id = 'FV_sys') %>%
ggplot(., aes(x = FV_sys, y = value, color = variable)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
# scale_y_continuous(limits = c(0,0.4)) +
# scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
## Yield - should look domey
brute[,c(1:4)] %>%
melt(id = 'FV_sys') %>%
ggplot(., aes(x = FV_sys, y = value, color = variable)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
scale_y_continuous(limits = c(0,0.4)) +
# scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
## Yield - should look domey
brute[,c(1:4)] %>%
melt(id = 'FV_sys') %>%
ggplot(., aes(x = FV_sys, y = value, color = variable)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
scale_y_continuous(limits = c(0,0.3)) +
# scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
ggsave(last_plot(),
file = here('figs','bruteYield.png'),
width = 6, height = 4, unit = 'in', dpi = 520)
doNage <- function(X = X_ija, ## input movement matrix
indat = dat, ## with bio info'
s = 1, ## F = 1, M = 2
Fv = rep(0,narea),
M = 0.15) {
N_ai <- Z_ai <- B_ai <- SB_ai<- matrix(NA, nrow = nages, ncol = narea) ## placeholder
for(a in 1:nages){
if(a == 1) N_ai[a,] <- 1/narea ## inits
for(i in 1:narea){
Z_ai[a,i] <- M + indat[a,s+4,i]*Fv[i] ## female selex for now (cols 5:6)
if(a > 1  & a < max(nages)) {
pLeave = NCome = 0
for(j in 1:narea){
if(i != j){
pLeave = pLeave + X_ija[i,j,a-1]
NCome = NCome + X_ija[j,i,a-1]*N_ai[a-1,j]
} # end i != j
} # end subareas j
N_ai[a,i] <- ((1-pLeave)* N_ai[a-1,i] +NCome)*exp(-Z_ai[a-1,i])
} ## end age < maxage
if(a == max(nages)) N_ai[a,i] <-  N_ai[a-1,i]*exp(-Z_ai[a-1,i])/(1- exp(-Z_ai[a,i]))
B_ai[a,i] <- N_ai[a,i]*indat[a,s+2,i] ## weight in 3 and 4 col
if(s == 1){
# SB_ai[a,i]  <- NA
SB_ai[a,i]  <- B_ai[a,i]*indat[a,2,i]
}
B_i <- sum(B_ai[,i])
SB_i <- sum(SB_ai[,i])
} # end subareas i
} ## end ages
return(cbind(N_ai,Z_ai,B_ai,SB_ai))
}
doNage(s = 1,  Fv = rep(0,narea))[,1:3] %>%
data.frame() %>%
mutate(Age = 1:nages) %>%
reshape2::melt(id = 'Age') %>%
mutate(Area = substr(variable,2,2)) %>%
ggplot(., aes(x = Age, y = value, col = Area)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'Age', y = 'Relative Numbers', color = '') +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
ggsave(last_plot(),
file = here('figs','Nage.png'),
width = 6, height = 4, unit = 'in', dpi = 520)
brute <- data.frame('FV_sys' = NA, "yield_1" = NA, "yield_2" = NA,"yield_3" = NA,
"ypr_1" = NA, "ypr_2" = NA,"ypr_3" = NA)
Fv_test <- seq(0,1,0.01)
for( v in 1:length(Fv_test)){
temp <- masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[v],narea))
temp2 <- doYPR(Fv = rep(Fv_test[v],narea))
brute[v,'FV_sys'] = Fv_test[v]
for(a in 1:narea) brute[v,a+1] = temp$yield[a]
for(a in 1:narea) brute[v,a+4] = temp2[[2]][a]
}
brute[,c(1:4)] %>%
melt(id = 'FV_sys') %>%
ggplot(., aes(x = FV_sys, y = value, color = variable)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
scale_y_continuous(limits = c(0,0.3)) +
# scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
head(brute_config)
brute_config <- data.frame(expand.grid(Area = 1:3, FA1 = seq(0.01,0.5,0.01),
FA2 = seq(0.01,0.5,0.01), FA3 = seq(0.01,0.5,0.01)),
"yield_1" = NA, "yield_2" = NA,"yield_3" = NA)
brute_config <- sample_n(brute_config, 5000)
for(i in 1:nrow(brute_config)){
temp <- masterFunc(SRR = 1, h = steep, Fv = with(brute_config[i,], c(FA1,FA2,FA3)))
# temp2 <- doYPR(Fv = rep(Fv_test[i],narea))
for(a in 1:narea) brute_config[i,a+4] = temp$yield[a]
# for(a in 1:narea) brute[i,a+4] = temp2[[2]][a]
}
brute_config <- data.frame(expand.grid(Area = 1:3, FA1 = seq(0.01,0.5,0.01),
FA2 = seq(0.01,0.5,0.01), FA3 = seq(0.01,0.5,0.01)),
"yield_1" = NA, "yield_2" = NA,"yield_3" = NA)
brute_config <- sample_n(brute_config, 5000)
for(i in 1:nrow(brute_config)){
temp <- masterFunc(SRR = 1, h = steep, Fv = with(brute_config[i,], c(FA1,FA2,FA3)))
# temp2 <- doYPR(Fv = rep(Fv_test[i],narea))
for(a in 1:narea) brute_config[i,a+4] = temp$yield[a]
# for(a in 1:narea) brute[i,a+4] = temp2[[2]][a]
if(i %% 100 == 0) cat(i,"\n")
}
# brute_co
head(brute_config)
## try a 3d plot
with(brute_config, persp(FA1,FA2,FA3))
#   scale_color_grey(labels = paste("Area",1:3)) +
#   labs(x = 'F in area', y = 'YPR', color = '') +
#   # scale_y_continuous(limits = c(0,0.5)) +
#   theme_sleek() +
#   theme(legend.position = c(0.8,0.9),
#         axis.title = element_text(size = 16),
#         axis.text = element_text(size = 16),
#         legend.text = element_text(size = 20))
## Brute Config ----
## takes about 4 mins with 5k subset
brute_config <- data.frame(expand.grid(Area = 1:3, FA1 = seq(0.01,0.5,0.01),
FA2 = seq(0.01,0.5,0.01), FA3 = seq(0.01,0.5,0.01)),
"yield_1" = NA, "yield_2" = NA,"yield_3" = NA)
# brute_config <- sample_n(brute_config, 5000)
brute_config <- brute_config[1:500,] ## xy need to be increasing
for(i in 1:nrow(brute_config)){
temp <- masterFunc(SRR = 1, h = steep, Fv = with(brute_config[i,], c(FA1,FA2,FA3)))
# temp2 <- doYPR(Fv = rep(Fv_test[i],narea))
for(a in 1:narea) brute_config[i,a+4] = temp$yield[a]
# for(a in 1:narea) brute[i,a+4] = temp2[[2]][a]
if(i %% 100 == 0) cat(i,"\n")
}
## try a 3d plot
with(brute_config, persp(FA1,FA2,FA3))
head(brute_config)
x <- y <- seq(-1, 1, length= 20)
z <- outer(x, y, cone)
require(plotly)
install.packages('plotly')
require(plotly)
?plot_ly
## try a 3d plot
plot_ly(brute_config, x=FA1)
## try a 3d plot
plot_ly(brute_config, x=~FA1)
## try a 3d plot
plot_ly(brute_config, x=~FA1,y = ~FA2)
## try a 3d plot
plot_ly(brute_config, x=~FA1,y = ~FA2, z = ~FA3, type = 'surface')
install.packages('plot3D')
## try a 3d plot
require(plot3D)
with(brute_config, scatter3D(FA1,FA2,FA3, bty = "g", pch = 18, col = gg.col(100)))
with(brute_config, scatter3D(FA1,FA2,FA3, bty = "g", pch = 18, col = yield_A1))
head(brute_config)
with(brute_config, scatter3D(FA1,FA2,FA3, bty = "g", pch = 18, col = yield_1))
with(brute_config, scatter3D(FA1,FA2,yield_1, bty = "g", pch = 18, col = yield_1))
with(brute_config, scatter3D(FA1,FA2,yield_1, bty = "g", pch = 18))
with(brute_config, scatter3D(FA1,FA2,yield_2, bty = "g", pch = 18))
with(brute_config, scatter3D(FA2,FA3,yield_2, bty = "g", pch = 18))
brute_config <- data.frame(expand.grid(Area = 1:3, FA1 = seq(0.01,0.5,0.01),
FA2 = seq(0.01,0.5,0.01), FA3 = seq(0.01,0.5,0.01)),
"yield_1" = NA, "yield_2" = NA,"yield_3" = NA)
# brute_config <- sample_n(brute_config, 5000)
brute_config <- brute_config[1:5000,] ## xy need to be increasing
for(i in 1:nrow(brute_config)){
temp <- masterFunc(SRR = 1, h = steep, Fv = with(brute_config[i,], c(FA1,FA2,FA3)))
# temp2 <- doYPR(Fv = rep(Fv_test[i],narea))
for(a in 1:narea) brute_config[i,a+4] = temp$yield[a]
# for(a in 1:narea) brute[i,a+4] = temp2[[2]][a]
if(i %% 100 == 0) cat(i,"\n")
}
brute_config$IDX <- 1:nrow(brute_config)
with(brute_config, scatter3D(FA1,FA2,yield_1, pch = 18, theta = 15, phi = 20))
with(brute_config, scatter3D(FA2,FA3,yield_2, bty = "g", pch = 18))
with(brute_config, scatter3D(FA2,FA3,yield_2, pch = 18, theta = 15, phi = 20))
with(brute_config, unique(FA3))
with(brute_config, scatter3D(FA1,FA2,yield_1, pch = 18, theta = 15, phi = 20))
with(brute_config, unique(FA2))
with(brute_config, scatter3D(FA1,FA2,FA3, pch = 18, theta = 15, phi = 20))
#   scale_color_grey(labels = paste("Area",1:3)) +
#   labs(x = 'F in area', y = 'YPR', color = '') +
#   # scale_y_continuous(limits = c(0,0.5)) +
#   theme_sleek() +
#   theme(legend.position = c(0.8,0.9),
#         axis.title = element_text(size = 16),
#         axis.text = element_text(size = 16),
#         legend.text = element_text(size = 20))
## Brute Config ----
## takes about 4 mins with 5k subset
brute_config <- data.frame(expand.grid(Area = 1:3, FA1 = seq(0.01,0.5,0.01),
FA2 = seq(0.01,0.5,0.01), FA3 = seq(0.01,0.5,0.01)),
"yield_1" = NA, "yield_2" = NA,"yield_3" = NA)
dim(brute_config)
#   scale_color_grey(labels = paste("Area",1:3)) +
#   labs(x = 'F in area', y = 'YPR', color = '') +
#   # scale_y_continuous(limits = c(0,0.5)) +
#   theme_sleek() +
#   theme(legend.position = c(0.8,0.9),
#         axis.title = element_text(size = 16),
#         axis.text = element_text(size = 16),
#         legend.text = element_text(size = 20))
## Brute Config ----
## takes about 4 mins with 5k subset
brute_config <- data.frame(expand.grid(Area = 1:3, FA1 = seq(0,1,0.1),
FA2 =  seq(0,1,0.1),
FA3 =  seq(0,1,0.1)),
"yield_1" = NA, "yield_2" = NA,"yield_3" = NA)
dim(brute_config)
# brute_config <- sample_n(brute_config, 5000)
# brute_config <- brute_config[1:5000,] ## xy need to be increasing
for(i in 1:nrow(brute_config)){
temp <- masterFunc(SRR = 1, h = steep, Fv = with(brute_config[i,], c(FA1,FA2,FA3)))
# temp2 <- doYPR(Fv = rep(Fv_test[i],narea))
for(a in 1:narea) brute_config[i,a+4] = temp$yield[a]
# for(a in 1:narea) brute[i,a+4] = temp2[[2]][a]
if(i %% 100 == 0) cat(i,"\n")
}
with(brute_config, scatter3D(FA1,FA2,FA3, pch = 18, theta = 15, phi = 20, colvar = yield_1))
# plot_ly(brute_config, x=~FA1,y = ~FA2, z = ~FA3, type = 'surface')
bc <- cbind(brute_config[,c(2:4,8)] %>%
melt(id = 'IDX') %>%
mutate(Area = substr(variable,3,3)) %>% select(value, Area),
brute_config[,c(5:8)] %>%
melt(id = 'IDX') %>%
mutate(Area = substr(variable,7,7)) %>% select(value, Area, IDX))
names(bc)[c(1,3)] <- c("Fv","Yield")
brute_config
head(bc)
brute_config$IDX <- 1:nrow(brute_config)
# plot_ly(brute_config, x=~FA1,y = ~FA2, z = ~FA3, type = 'surface')
bc <- cbind(brute_config[,c(2:4,8)] %>%
melt(id = 'IDX') %>%
mutate(Area = substr(variable,3,3)) %>% select(value, Area),
brute_config[,c(5:8)] %>%
melt(id = 'IDX') %>%
mutate(Area = substr(variable,7,7)) %>% select(value, Area, IDX))
head(bc)
names(bc)[c(1,3)] <- c("Fv","Yield")
bc <- bc[,c(1:3,5)]
ggplot(bc, aes(x = Fv, y = Yield, color = IDX))+
# geom_line(lwd = 1.1) +
geom_point() +
# scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
# scale_y_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
facet_wrap(~factor(Area))
with(subset(brute_config, FA1 < 0.5), scatter3D(FA1,FA2,FA3,
pch = 18, theta = 15, phi = 20, colvar = yield_1))
with(
subset(brute_config, FA1 < 0.5),
scatter3D(
FA1,
FA2,
yield_1,
pch = 18,
theta = 15,
phi = 20,
colvar = yield_1
)
)
with(
subset(brute_config, yield_1 > 0 ),
scatter3D(
FA1,
FA2,
yield_1,
pch = 18,
theta = 15,
phi = 20,
colvar = yield_1
)
)
with(
subset(brute_config ),
scatter3D(
FA1,
FA2,
yield_1,
pch = 18,
theta = 15,
phi = 20,
colvar = yield_1
)
)
summary(brute_config$yield_1)
with(
subset(brute_config ),
scatter3D(
FA1,
FA2,
yield_1,
pch = 18,
theta = 15,
phi = 20,
colvar = yield_2
)
)
with(
subset(brute_config ),
scatter3D(
x = FA1,
y = FA2,
z =yield_2,
pch = 18,
theta = 15,
phi = 20,
colvar = yield_2
)
)
with(
subset(brute_config ),
scatter3D(
x = FA1,
y = FA2,
z = yield_2,
pch = 18,
theta = 15,
type = 'l',
phi = 20,
colvar = yield_2
)
)
with(
subset(brute_config ),
scatter3D(
x = FA1,
y = FA2,
z = yield_2,
pch = 18,
theta = 15,
# type = 'l',
phi = 20,
colvar = yield_2
)
)
with(
subset(brute_config ),
scatter3D(
x = FA1,
y = FA2,
z = yield_2,
pch = 18,
theta = 15,
# type = 'l',
phi = 40,
colvar = yield_2
)
)
with(
subset(brute_config ),
scatter3D(
x = FA1,
y = FA2,
z = yield_2,
pch = 18,
theta = 40,
# type = 'l',
phi = 20
,
colvar = yield_2
)
)
with(
subset(brute_config ),
scatter3D(
x = FA3,
y = FA2,
z = yield_2,
pch = 18,
theta = 40,
# type = 'l',
phi = 20
,
colvar = yield_2
)
)
with(
subset(brute_config ),
scatter3D(
x = FA3,
y = FA2,
z = yield_3,
pch = 18,
theta = 40,
# type = 'l',
phi = 20
,
colvar = yield_2
)
)
with(
subset(brute_config ),
scatter3D(
x = FA3,
y = FA2,
z = yield_3,
pch = 18,
theta = 40,
# type = 'l',
phi = 20
,
colvar = yield_3
)
)
with(
subset(brute_config ),
scatter3D(
x = FA3,
y = FA1,
z = yield_3,
pch = 18,
theta = 40,
# type = 'l',
phi = 20
,
colvar = yield_3
)
)
