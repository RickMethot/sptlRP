geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
scale_y_continuous(limits = c(0,0.3)) +
# scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
}
brute_config_STD[,c(1:4)] %>%
filter(sysyield > 0) %>%
melt(id = 'FV_sys') %>%
ggplot(., aes(x = FV_sys, y = value, color = variable)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
scale_y_continuous(limits = c(0,0.3)) +
# scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
head(brute_config_STD)
brute_config_STD[,c(1:4,9)] %>%
filter(sysyield > 0) %>%
melt(id = 'FV_sys') %>%
ggplot(., aes(x = FV_sys, y = value, color = variable)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
scale_y_continuous(limits = c(0,0.3)) +
# scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
## Brute Y----
brute <- data.frame('FV_sys' = NA, "yield_1" = NA, "yield_2" = NA,"yield_3" = NA,
"ypr_1" = NA, "ypr_2" = NA,"ypr_3" = NA)
Fv_test <- seq(0,1,0.01)
for( v in 1:length(Fv_test)){
temp <- masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[v],narea))
temp2 <- doYPR(Fv = rep(Fv_test[v],narea))
brute[v,'FV_sys'] = Fv_test[v]
for(a in 1:narea) brute[v,a+1] = temp$yield[a]
for(a in 1:narea) brute[v,a+4] = temp2[[2]][a]
# brute$sysyield[v] <- sum(brute[a,2:4])
}
narea = 3
nages = 21
steep = 0.5
## load functions & initialize OM
lapply(list.files(here("R"), full.names = TRUE), source)
SB0_i <-  data.frame()
for(m in c(1:3)){
SB0_im <- getSB0(eq_method = c('STD','STB','STB')[m])
# SB0_i[m,1] <-
SB0_i[m,1:3] <- SB0_im
}
row.names(SB0_i) <- c('STD','TIME','STB')
for( v in 1:length(Fv_test)){
temp <- masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[v],narea))
temp2 <- doYPR(Fv = rep(Fv_test[v],narea))
brute[v,'FV_sys'] = Fv_test[v]
for(a in 1:narea) brute[v,a+1] = temp$yield[a]
for(a in 1:narea) brute[v,a+4] = temp2[[2]][a]
# brute$sysyield[v] <- sum(brute[a,2:4])
}
paste("brute_",e) <- data.frame('FV_sys' = NA, "yield_1" = NA, "yield_2" = NA,"yield_3" = NA,
"ypr_1" = NA, "ypr_2" = NA,"ypr_3" = NA)
## bruteYield (systemwide)
Fv_test <- seq(0,maxF,incF)
e = 'STD'
maxF <- 0.5
incF <- c(0.01,0.05,0.1)[2]
## bruteYield (systemwide)
Fv_test <- seq(0,maxF,incF)
for(e in c("STD",'TIME','STB')){
brute <- data.frame('FV_sys' = NA, "yield_1" = NA, "yield_2" = NA,"yield_3" = NA,
"ypr_1" = NA, "ypr_2" = NA,"ypr_3" = NA)
for( v in 1:length(Fv_test)){
temp <- masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[v],narea), eq_method = e )
temp2 <- doYPR(Fv = rep(Fv_test[v],narea))
brute[v,'FV_sys'] = Fv_test[v]
for(a in 1:narea) brute[v,a+1] = temp$yield[a]
for(a in 1:narea) brute[v,a+4] = temp2[[2]][a]
brute$sysyield[v] <- sum(brute[a,2:4])
} ## end rows
save(brute, file = here('rdata',paste('brute_',e,'.rdata')))
} ## end eq method
for(e in c("STD",'TIME','STB')){
brute <- data.frame('FV_sys' = NA, "yield_1" = NA, "yield_2" = NA,"yield_3" = NA,
"ypr_1" = NA, "ypr_2" = NA,"ypr_3" = NA)
for( v in 1:length(Fv_test)){
temp <- masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[v],narea), eq_method = e )
# temp2 <- doYPR(Fv = rep(Fv_test[v],narea))
brute[v,'FV_sys'] = Fv_test[v]
for(a in 1:narea) brute[v,a+1] = temp$yield[a]
# for(a in 1:narea) brute[v,a+4] = temp2[[2]][a]
brute$sysyield[v] <- sum(brute[a,2:4])
} ## end rows
save(brute, file = here('rdata',paste('brute_',e,'.rdata')))
} ## end eq method
brute
for( v in 1:length(Fv_test)){
temp <- masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[v],narea), eq_method = e )
# temp2 <- doYPR(Fv = rep(Fv_test[v],narea))
brute[v,'FV_sys'] = Fv_test[v]
for(a in 1:narea) brute[v,a+1] = temp$yield[a]
# for(a in 1:narea) brute[v,a+4] = temp2[[2]][a]
brute$sysyield[v] <- sum(brute[v,2:4])
} ## end rows
brute
for(e in c("STD",'TIME','STB')){
brute <- data.frame('FV_sys' = NA, "yield_1" = NA, "yield_2" = NA,"yield_3" = NA,
"ypr_1" = NA, "ypr_2" = NA,"ypr_3" = NA)
for( v in 1:length(Fv_test)){
temp <- masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[v],narea), eq_method = e )
# temp2 <- doYPR(Fv = rep(Fv_test[v],narea))
brute[v,'FV_sys'] = Fv_test[v]
for(a in 1:narea) brute[v,a+1] = temp$yield[a]
# for(a in 1:narea) brute[v,a+4] = temp2[[2]][a]
brute$sysyield[v] <- sum(brute[v,2:4])
} ## end rows
save(brute, file = here('rdata',paste('brute_',e,'.rdata')))
} ## end eq method
for(e in c("STD",'TIME','STB')){
brute <- data.frame('FV_sys' = NA, "yield_1" = NA, "yield_2" = NA,"yield_3" = NA,
"ypr_1" = NA, "ypr_2" = NA,"ypr_3" = NA)
for( v in 1:length(Fv_test)){
temp <- masterFunc(SRR = 1, h = steep, Fv = rep(Fv_test[v],narea), eq_method = e )
# temp2 <- doYPR(Fv = rep(Fv_test[v],narea))
brute[v,'FV_sys'] = Fv_test[v]
for(a in 1:narea) brute[v,a+1] = temp$yield[a]
# for(a in 1:narea) brute[v,a+4] = temp2[[2]][a]
brute$sysyield[v] <- sum(brute[v,2:4])
} ## end rows
save(brute, file = here('rdata',paste0('brute_',e,'.rdata')))
} ## end eq method
load("C:/Users/mkapur/Dropbox/UW/sptlRP/rdata/brute_TIME.rdata")
brute[,c(1:4)] %>%
melt(id = 'FV_sys') %>%
ggplot(., aes(x = FV_sys, y = value, color = variable)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
scale_y_continuous(limits = c(0,0.3)) +
# scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
brute[,c(1:4)] %>%
melt(id = 'FV_sys') %>%
ggplot(., aes(x = FV_sys, y = value, color = variable)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
# scale_y_continuous(limits = c(0,0.3)) +
# scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
brute[,c(1:4)] %>%
melt(id = 'FV_sys') %>%
ggplot(., aes(x = FV_sys, y = value, color = variable)) +
geom_line(lwd = 1.1) +
scale_color_grey(labels = paste("Area",1:3)) +
labs(x = 'F in area', y = 'Yield', color = '') +
scale_y_continuous(limits = c(0,1)) +
# scale_x_continuous(limits = c(0,0.5)) +
theme_sleek() +
theme(legend.position = c(0.8,0.9),
axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20))
## function to return population level F given various Fv, p_i
## Eq 7 in CJFAS pub, but not subtracting M
langsF <- function(M, N_ai, Fv,p_i){
num1 <-  p_i[1]*N_ai[a-1,1]*exp(-Fv[1]-M)
num2 <-  p_i[2]*N_ai[a-1,2]*exp(-Fv[2]-M)
num3 <-  p_i[3]*N_ai[a-1,3]*exp(-Fv[3]-M)
denom <- sum(p_i*N_ai[a-1,])
return(-log(sum(num1,num2,num3)/denom))
}
N_ai_temp = doNage(Fv = rep(0.11,narea), eq_method = 'STD')
N_ai_temp
N_ai_temp = doNage(Fv = rep(0.11,narea), eq_method = 'STD')[,1:3]
langsF(M = 0.15, N_ai = N_ai_temp, Fv = rep(0, narea), p_i = c(0.25,0.25,0.5))
langsF(M = 0.15, N_ai = N_ai_temp, Fv = rep(0.11, narea), p_i = c(0.25,0.25,0.5))
## Optimization based upon equilibrium method (6 scenarios)
df2 <- data.frame(
expand.grid('Area' = 1:3,
'Eq_Method' = c('STD','TIME','STB'),
'F_Method' = c('Fmsy_System','Fmsy_Config')),
'FMSY' = NA,
'F_POP' = NA,
'MSY' = NA,
'BMSY' = NA,
'B0' = NA)
for(e in 1:length(c('STD','TIME','STB'))){
cat(c('STD','TIME','STB')[e],"\n")
## find optimal F vector with various methods
## FMSY_SYSTEM
FVTEMP <-    as.numeric(uniroot(f = dfx.dxSYS,  h = steep, eq_method = c('STD','TIME','STB')[e],
interval = c(0.02,1))[1])
cat("SYSTEM","\n")
df2$FMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <- rep(FVTEMP,narea)
df2$MSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method ==  c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])$yield
df2$BMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])$spawnbio
## get population-level F
N_ai_temp = doNage(Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])[,1:3]
df2$BMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
langsF(M = 0.15, N_ai = N_ai_temp, Fv = rep(FVTEMP,narea), p_i = c(0.25,0.25,0.5))
rm(FVTEMP)
## FMSY_CONFIG
FVTEMP <-  coef(mle(minFunc,
start = list(F1 = 0.025, F2 = 0.025, F3 = 0.025),
method = "L-BFGS-B",
fixed = list(e = e), ## subsetting eq method
lower = c(0.02, 0.02,0.02), upper = c(1,1,1)))[1:3]
cat("CONFIG","\n")
df2$FMSY[df2$F_Method == 'Fmsy_Config' & df2$Eq_Method == c('STD','TIME','STB')[e]] <- FVTEMP
df2$MSY[df2$F_Method == 'Fmsy_Config'& df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])$yield
df2$BMSY[df2$F_Method == 'Fmsy_Config'& df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])$spawnbio
## get population-level F
N_ai_temp = doNage(Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])[,1:3]
df2$BMSY[df2$F_Method == 'Fmsy_Config' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
langsF(M = 0.15, N_ai = N_ai_temp, Fv = rep(FVTEMP,narea), p_i = c(0.25,0.25,0.5))
unfishedB <- apply(doNage(eq_method = c('STD','TIME','STB')[e])[,7:9],2,sum)
df2$B0[df2$Area == 1 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[1]
df2$B0[df2$Area == 2 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[2]
df2$B0[df2$Area == 3 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[3]
}
require(stats4)
for(e in 1:length(c('STD','TIME','STB'))){
cat(c('STD','TIME','STB')[e],"\n")
## find optimal F vector with various methods
## FMSY_SYSTEM
FVTEMP <-    as.numeric(uniroot(f = dfx.dxSYS,  h = steep, eq_method = c('STD','TIME','STB')[e],
interval = c(0.02,1))[1])
cat("SYSTEM","\n")
df2$FMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <- rep(FVTEMP,narea)
df2$MSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method ==  c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])$yield
df2$BMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])$spawnbio
## get population-level F
N_ai_temp = doNage(Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])[,1:3]
df2$BMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
langsF(M = 0.15, N_ai = N_ai_temp, Fv = rep(FVTEMP,narea), p_i = c(0.25,0.25,0.5))
rm(FVTEMP)
## FMSY_CONFIG
FVTEMP <-  coef(mle(minFunc,
start = list(F1 = 0.025, F2 = 0.025, F3 = 0.025),
method = "L-BFGS-B",
fixed = list(e = e), ## subsetting eq method
lower = c(0.02, 0.02,0.02), upper = c(1,1,1)))[1:3]
cat("CONFIG","\n")
df2$FMSY[df2$F_Method == 'Fmsy_Config' & df2$Eq_Method == c('STD','TIME','STB')[e]] <- FVTEMP
df2$MSY[df2$F_Method == 'Fmsy_Config'& df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])$yield
df2$BMSY[df2$F_Method == 'Fmsy_Config'& df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])$spawnbio
## get population-level F
N_ai_temp = doNage(Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])[,1:3]
df2$BMSY[df2$F_Method == 'Fmsy_Config' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
langsF(M = 0.15, N_ai = N_ai_temp, Fv = rep(FVTEMP,narea), p_i = c(0.25,0.25,0.5))
unfishedB <- apply(doNage(eq_method = c('STD','TIME','STB')[e])[,7:9],2,sum)
df2$B0[df2$Area == 1 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[1]
df2$B0[df2$Area == 2 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[2]
df2$B0[df2$Area == 3 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[3]
}
e
doNage(Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])[,1:3]
## Optimization based upon equilibrium method (6 scenarios)
df2 <- data.frame(
expand.grid('Area' = 1:3,
'Eq_Method' = c('STD','TIME','STB'),
'F_Method' = c('Fmsy_System','Fmsy_Config')),
'FMSY' = NA,
'F_POP' = NA,
'MSY' = NA,
'BMSY' = NA,
'B0' = NA)
for(e in 1:length(c('STD','TIME','STB'))){
cat(c('STD','TIME','STB')[e],"\n")
## find optimal F vector with various methods
## FMSY_SYSTEM
FVTEMP <-    as.numeric(uniroot(f = dfx.dxSYS,  h = steep, eq_method = c('STD','TIME','STB')[e],
interval = c(0.02,1))[1])
cat("SYSTEM","\n")
df2$FMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <- rep(FVTEMP,narea)
df2$MSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method ==  c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])$yield
df2$BMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])$spawnbio
## get population-level F
N_ai_temp = doNage(Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])[,1:3]
df2$BMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
langsF(M = 0.15, N_ai = N_ai_temp, Fv = rep(FVTEMP,narea), p_i = c(0.25,0.25,0.5))
rm(FVTEMP)
## FMSY_CONFIG
FVTEMP <-  coef(mle(minFunc,
start = list(F1 = 0.025, F2 = 0.025, F3 = 0.025),
method = "L-BFGS-B",
fixed = list(e = e), ## subsetting eq method
lower = c(0.02, 0.02,0.02), upper = c(1,1,1)))[1:3]
cat("CONFIG","\n")
df2$FMSY[df2$F_Method == 'Fmsy_Config' & df2$Eq_Method == c('STD','TIME','STB')[e]] <- FVTEMP
df2$MSY[df2$F_Method == 'Fmsy_Config'& df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])$yield
df2$BMSY[df2$F_Method == 'Fmsy_Config'& df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])$spawnbio
## get population-level F
N_ai_temp = doNage(Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])[,1:3]
df2$BMSY[df2$F_Method == 'Fmsy_Config' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
langsF(M = 0.15, N_ai = N_ai_temp, Fv = FVTEMP, p_i = c(0.25,0.25,0.5))
unfishedB <- apply(doNage(eq_method = c('STD','TIME','STB')[e])[,7:9],2,sum)
df2$B0[df2$Area == 1 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[1]
df2$B0[df2$Area == 2 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[2]
df2$B0[df2$Area == 3 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[3]
}
df2 %>%
ggplot(., aes(x = F_MSY, y = F_POP, fill = factor(eq_method))) +
geom_point() +
theme_sleek() + scale_fill_grey() +
labs(x= 'Equilibrium Method',y = expression("F"[MSY]), fill = 'Area') +
facet_wrap(~F_Method)
head(df2)
df2 %>%
ggplot(., aes(x = FMSY, y = F_POP, fill = factor(eq_method))) +
geom_point() +
theme_sleek() + scale_fill_grey() +
labs(x= 'Equilibrium Method',y = expression("F"[MSY]), fill = 'Area') +
facet_wrap(~F_Method)
## get population-level F
N_ai_temp = doNage(Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])[,1:3]
## Optimization based upon equilibrium method (6 scenarios)
df2 <- data.frame(
expand.grid('Area' = 1:3,
'Eq_Method' = c('STD','TIME','STB'),
'F_Method' = c('Fmsy_System','Fmsy_Config')),
'FMSY' = NA,
'F_POP' = NA,
'MSY' = NA,
'BMSY' = NA,
'B0' = NA)
for(e in 1:length(c('STD','TIME','STB'))){
cat(c('STD','TIME','STB')[e],"\n")
## find optimal F vector with various methods
## FMSY_SYSTEM
FVTEMP <-    as.numeric(uniroot(f = dfx.dxSYS,  h = steep, eq_method = c('STD','TIME','STB')[e],
interval = c(0.02,1))[1])
cat("-SYSTEM","\n")
df2$FMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <- rep(FVTEMP,narea)
df2$MSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method ==  c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])$yield
df2$BMSY[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])$spawnbio
## get population-level F
N_ai_temp = doNage(Fv = rep(FVTEMP,narea), eq_method = c('STD','TIME','STB')[e])[,1:3]
df2$F_POP[df2$F_Method == 'Fmsy_System' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
langsF(M = 0.15, N_ai = N_ai_temp, Fv = rep(FVTEMP,narea), p_i = c(0.25,0.25,0.5))
rm(FVTEMP)
## FMSY_CONFIG
FVTEMP <-  coef(mle(minFunc,
start = list(F1 = 0.025, F2 = 0.025, F3 = 0.025),
method = "L-BFGS-B",
fixed = list(e = e), ## subsetting eq method
lower = c(0.02, 0.02,0.02), upper = c(1,1,1)))[1:3]
cat("--CONFIG","\n")
df2$FMSY[df2$F_Method == 'Fmsy_Config' & df2$Eq_Method == c('STD','TIME','STB')[e]] <- FVTEMP
df2$MSY[df2$F_Method == 'Fmsy_Config'& df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])$yield
df2$BMSY[df2$F_Method == 'Fmsy_Config'& df2$Eq_Method == c('STD','TIME','STB')[e]] <-
masterFunc(SRR = 1, Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])$spawnbio
## get population-level F
N_ai_temp = doNage(Fv = FVTEMP, eq_method = c('STD','TIME','STB')[e])[,1:3]
df2$F_POP[df2$F_Method == 'Fmsy_Config' & df2$Eq_Method == c('STD','TIME','STB')[e]] <-
langsF(M = 0.15, N_ai = N_ai_temp, Fv = FVTEMP, p_i = c(0.25,0.25,0.5))
unfishedB <- apply(doNage(eq_method = c('STD','TIME','STB')[e])[,7:9],2,sum)
df2$B0[df2$Area == 1 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[1]
df2$B0[df2$Area == 2 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[2]
df2$B0[df2$Area == 3 & df2$Eq_Method == c('STD','TIME','STB')[e]] <- unfishedB[3]
}
df2
df2 %>%
ggplot(., aes(x = FMSY, y = F_POP, fill = factor(Eq_Method))) +
geom_point() +
theme_sleek() + scale_fill_grey() +
labs(x= 'Equilibrium Method',y = expression("F"[MSY]), fill = 'Area') +
facet_wrap(~F_Method)
df2 %>%
ggplot(., aes(x = FMSY, y = F_POP, fill = factor(Eq_Method))) +
geom_point() +
theme_sleek() + scale_fill_grey() +
labs(x= expression("F"[MSY]),y = expression("F"[Pop]), fill = 'Area') +
facet_wrap(~F_Method)
df2 %>%
ggplot(., aes(x = FMSY, y = F_POP, fill = factor(Eq_Method))) +
geom_point() +
theme_sleek() + scale_fill_grey() +
labs(x= expression("F"[MSY]),y = expression("F"[Pop]), fill = 'Eq_Method') +
facet_wrap(~F_Method)
df2),
scatter3D(
with(
df2,
scatter3D(
x = FMSY, #matrix(FA3),
y = Area, # matrix(FA1),
z = F_POP, #matrix(sysyield),
pch = 19,
cex = 2,
theta = 20,
phi = 20,
colvar = sysyield,
col = rev(heat.colors(100)),
xlab = 'F Area 1',
ylab = 'F Area 2',
zlab = 'F Area 3')
)
)
require(plot3D)
with(
df2,
scatter3D(
x = FMSY, #matrix(FA3),
y = Area, # matrix(FA1),
z = F_POP, #matrix(sysyield),
pch = 19,
cex = 2,
theta = 20,
phi = 20,
colvar = sysyield,
col = rev(heat.colors(100)),
xlab = 'F Area 1',
ylab = 'F Area 2',
zlab = 'F Area 3')
)
with(
df2,
scatter3D(
x = FMSY, #matrix(FA3),
y = Area, # matrix(FA1),
z = F_POP, #matrix(sysyield),
pch = 19,
cex = 2,
theta = 20,
phi = 20,
colvar = Area,
col = rev(heat.colors(100)),
xlab = 'F Area 1',
ylab = 'F Area 2',
zlab = 'F Area 3')
)
with(
df2,
scatter3D(
x = FMSY, #matrix(FA3),
y = F_POP, # matrix(FA1),
z = Area, #matrix(sysyield),
pch = 19,
cex = 2,
theta = 20,
phi = 20,
colvar = Area,
col = rev(heat.colors(100)),
xlab = 'F Area 1',
ylab = 'F Area 2',
zlab = 'F Area 3')
)
rbind(
doNage(s = 1,  Fv = rep(0,narea), eq_method = 'STD')[,1:3] %>%
data.frame() %>%
mutate(Age = 1:nages, EQ = 'STD')%>%
reshape2::melt( id = c('Age','EQ')),
doNage(s = 1,  Fv = rep(0,narea), eq_method = 'TIME')[,1:3] %>%
data.frame() %>%
mutate(Age = 1:nages, EQ = 'TIME')%>%
reshape2::melt( id = c('Age','EQ')),
doNage(s = 1,  Fv = rep(0,narea), eq_method = 'STB')[,1:3] %>%
data.frame() %>%
mutate(Age = 1:nages, EQ = 'STB')%>%
reshape2::melt( id = c('Age','EQ'))) %>%
mutate(Area = substr(variable,2,2)) %>%
select(-variable) %>%
mutate(group = paste0("Area ",Area," ",EQ)) %>%
ggplot(., aes(x = Age, y = value, col = Area, linetype = group)) +
geom_line(lwd = 1.1) +
scale_color_grey() +
scale_linetype_manual(values = rep(c('solid','dashed','dotted'),3))+
scale_y_continuous(limits = c(0,1.5)) +
labs(x = 'Age', y = 'Relative Numbers', color = '', linetype = "") +
theme_sleek() +
theme(legend.position = 'none',
axis.title = element_text(size = 10),
axis.text = element_text(size = 10),
legend.text = element_text(size = 20)) +
facet_wrap(~EQ)
